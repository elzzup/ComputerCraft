--[[ ///////// logging ///////// ]]--

h = fs.open("/log", "a") 
h.write("---- start ---- \n")
h.close()

function writeMsg(msg)
  print (msg)
  h = fs.open("/log", "a")
  h.write(tostring(msg).."\n")
  h.close()
end

function errorLog(r,e)
  if not r then
    h = fs.open("/log", "a")
    writeMsg(e)
    h.close()
  end
end

--[[ ///////// move items ///////// ]]--

-- item corrects from other slot
function itemCollect(slot)

  -- storing the number of the current item
  local startCount = turtle.getItemCount(slot)
  for i = 1, 16 do
    turtle.select(i)
    turtle.transferTo(slot)
  end
  turtle.select(slot)
  local endCount = turtle.getItemCount(slot)

  -- Success When the number of items has increased
  if startCount >= endCount then
      return false
  end
  return true
end

-- The specified range for the slot
function itemDrop(slot,dirStr)
  for i = 1, slot do
    turtle.select(i)
    if dirStr ~= nil then
        turtle["drop"..dirStr]()
    end
    turtle.drop()
  end
end

-- Count the items total
-- The specified range for the slot
function getAllItem(slot)
  local ct = 0
  for i = 1, slot do
    ct = ct + turtle.getItemCount(i)
  end
  tfg.writeMsg("I digged item "..ct)
  return ct
end

-- Place the item at regular intervals
function placeItem(slot,count,space)
  if count == space then
    turtle.turnLeft()
    turtle.turnLeft()
    turtle.select(slot)
    r,e = turtle.place()
    tfg.writeMsg(torch)
    errorLog(r,e)
    turtle.turnLeft()
    turtle.turnLeft()
  end
end

-- Compare items
function itemCompare(slot,dirStr,target)
  turtle.select(slot)
  if dirStr == nill then
    dirStr = ""
  end
  if not turtle["compare"..dirStr](target) then
    return false
  end
  return true
end

--[[ ///////// fuel ///////// ]]--

function fuelPrint()
  fuelLvCount = "------------\n"..turtle.getFuelLevel().."\n------------"
  writeMsg(fuelLvCount)
end

-- Replenish if is less than 80 fuel
function autoRefuel(slot,count)
  if turtle.getFuelLevel() <= 80 then
    turtle.select(slot)
    if count == nil then
      count = 1
    end
    local r,e = turtle.refuel(count)
    errorLog(r,e)
  end
end

-- Is calculated at startup to replenish the fuel and refuel
function bootingRefuel(length,use,slot)
  fuelPrint()

  -- examine whether the fuel is enough to x
  local wantFuelLv = length * use
  local needFuelLv = turtle.getFuelLevel() - wantFuelLv
  writeMsg("want "..wantFuelLv)
  writeMsg("need "..needFuelLv)

  while 0 >= needFuelLv do
    turtle.select(slot)
    if not turtle.refuel(1) then
      r,e = turtle.refuel(1)
      writeMsg(e)
      return false
    end

    local fl = turtle.getFuelLevel()
    needFuelLv = fl - wantFuelLv
    textutils.slowPrint("now "..fl.."...")
  end
  turtle.select(1)
  writeMsg("done")
end

--[[ ///////// move turtles ///////// ]]--

function getHome(x)
  for i = 1, x do
    turtle.back()
  end
end

function turnAround(methodStr)
  turtle.turnLeft()
  while turtle[methodStr]() do
    os.sleep(0.4)
  end 
  turtle.turnLeft()
  turtle.turnLeft()
  while turtle[methodStr]() do
    os.sleep(0.4)
  end 
  turtle.turnLeft()
  while turtle[methodStr]() do
    os.sleep(0.4)
  end 
end

--[[ ///////// userinputs ///////// ]]--

-- Two choices.
-- Repeat the process when returned the other strings
-- msg > print message
-- yStr > Character you want to input at true
-- nStr > Character you want to input at false

function userInputYN(msg,yStr,nStr)
  while true do
    print(msg)
    local ans = read()
    if ans == yStr then
      return true
    elseif ans == nStr then
      return false
    end
  end
end


-- [[ ////////// Peripherals ////////// ]]--
function listPeripheral()
  for n,v in ipairs (peripheral.getNames()) do
    number = tostring(n)
    dir = tostring(v)
    type = peripheral.getType(v)
    textutils.tabulate({number , dir , type})
  end
  return number , dir , type
end

function checkPeripheral(typeStr)
  number , dir , type = listPeripheral()
  if not typeStr == type then
    return false
  end
  return true , dir
end

-- [[ ////////// redstone switching ////////// ]]--
function switch(rsDir)
  rs.setOutput(rsDir, true)
  sleep(1)
  rs.setOutput(rsDir, false)
end

-- [[ ////////// rednet submit ////////// ]]--
function sendRedNetMsg(id,msg)
  r , modemDir = checkPeripheral("modem")
  rednet.open(modemDir)
  rednet.send(id,msg,true)
  rednet.close(modemdir)
  writeMsg("sent message")
end

-- [[ ////////// files ////////// ]]--

-- Return true if there is a specific file
function checkFile(filePath)
  local fileName = fs.getName(filePath)
  local configDir = fs.getDrive(filePath)

  for i, v in ipairs(fs.list(configDir)) do
    textutils.tabulate({i, v}) -- ファイルリスト出力
    if v == fileName then
      return true , i
    end
  end
  return false , nil
end